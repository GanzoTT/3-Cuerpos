# -*- coding: utf-8 -*-
"""Simulación 3 Cuerpos

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EjXK8rmIIAvd9-qshIpjbrQNak76qJbQ
"""

import numpy as np

# Constante gravitacional (simplificada)
G = 1.0

# Masas de los tres cuerpos
m1, m2, m3 = 2.1, 3.0, 4.0

# Posiciones iniciales: [x, y]
r1 = np.array([0.0, 1.0])
r2 = np.array([-1.0, -1.0])
r3 = np.array([1.0, -1.0])

# Velocidades iniciales: [vx, vy]
v1 = np.array([0.347, 0.0])
v2 = np.array([0.0, 0.347])
v3 = np.array([-0.347, -0.347])

def acceleration(r1, r2, r3, m1, m2, m3):
    """
    Calcula las aceleraciones sobre cada cuerpo debido a la fuerza gravitacional
    ejercida por los otros dos cuerpos.

    Parámetros:
    - r1, r2, r3: posiciones actuales de los cuerpos
    - m1, m2, m3: masas de los cuerpos

    Retorna:
    - a1, a2, a3: aceleraciones resultantes para cada cuerpo
    """
    # Función interna para calcular la fuerza ejercida por rj sobre ri
    def force(ri, rj, mj):
        r = rj - ri                    # vector de distancia entre cuerpos
        dist = np.linalg.norm(r)       # norma (módulo) del vector de distancia
        return G * mj * r / dist**3    # fórmula de la fuerza gravitacional vectorial

    # Sumar fuerzas de los otros dos cuerpos sobre cada uno
    a1 = force(r1, r2, m2) + force(r1, r3, m3)
    a2 = force(r2, r1, m1) + force(r2, r3, m3)
    a3 = force(r3, r1, m1) + force(r3, r2, m2)
    return a1, a2, a3

# Parámetros de simulación
dt = 0.01  # Paso de tiempo
steps = 5000

# Inicialización de listas para almacenar trayectorias
r1s, r2s, r3s = [], [], []

# Bucle principal de simulación
for _ in range(steps):
       # Guardar la posición actual de cada cuerpo para graficarla más tarde
    r1s.append(r1.copy())
    r2s.append(r2.copy())
    r3s.append(r3.copy())

    # Calcular aceleraciones basadas en posiciones actuales
    a1, a2, a3 = acceleration(r1, r2, r3, m1, m2, m3)

    # Actualizar las velocidades con las aceleraciones (ley de Newton: F = m·g → a = F/m)
    v1 += a1 * dt
    v2 += a2 * dt
    v3 += a3 * dt

    # Actualizar las posiciones con las velocidades actuales
    r1 += v1 * dt
    r2 += v2 * dt
    r3 += v3 * dt

import matplotlib.pyplot as plt

r1s = np.array(r1s)
r2s = np.array(r2s)
r3s = np.array(r3s)

# Crear gráfico de trayectorias de los cuerpos
plt.plot(r1s[:, 0], r1s[:, 1], label='Cuerpo 1')
plt.plot(r2s[:, 0], r2s[:, 1], label='Cuerpo 2')
plt.plot(r3s[:, 0], r3s[:, 1], label='Cuerpo 3')

# Etiquetas y formato del gráfico
plt.title("Simulación del Problema de los Tres Cuerpos")
plt.xlabel("x")
plt.ylabel("y")
plt.legend()
plt.grid(True)
plt.axis("equal")  # Igualar escalas de x e y para mejor visualización
plt.show()